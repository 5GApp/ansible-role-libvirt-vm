---
- name: Gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}.yml"
      skip: true
  tags: vars

- name: Ensure the VM console log directory exists
  file:
    path: "{{ console_log_path | dirname }}"
    state: directory
    owner: "{{ libvirt_vm_qemu_user }}"
    group: "{{ libvirt_vm_qemu_user }}"
    recurse: true
    mode: 0770
  when: console_log_enabled | bool
  become: true

- name: Validate VM interfaces
  include_tasks: check-interface.yml
  vars:
    interface: "{{ item }}"
  with_items: "{{ interfaces }}"

- name: Create secure boot template variables
  include_tasks: prepare-secure-boot.yml
  when:
    - boot_firmware == "efi"
    - enable_secure_boot
    - libvirt_vm_ovmf_uefi_shell_iso_path is defined

- name: Undefine libvirt machine if already defined
  # Otherwise vm.xml.j2 will not be updated when variables are changed
  #
  # note(wszumski): the virt module does not seem to support
  # removing vms with nvram defined - as a workaround, use the
  # virsh cli directly. It may be better to detect if dumpxml
  # actually contains an nvram element rather than relying on
  # boot_firmware having the correct value.
  command: virsh -c qemu:///system undefine{% if boot_firmware == 'efi' %} --nvram{% endif %} {{ vm.name }}
  become: true
  register: result
  failed_when: result.rc != 0 and "no domain with matching name" not in result.stderr

- name: Ensure the VM is defined
  virt:
    name: "{{ vm.name }}"
    command: define
    xml: "{{ lookup('template', 'vm.xml.j2') }}"
  become: true

- name: Ensure the VM is running and started at boot
  virt:
    name: "{{ vm.name }}"
    autostart: "{{ autostart | bool }}"
    state: "{{ 'running' if (start | bool) else 'shutdown' }}"
  become: true
